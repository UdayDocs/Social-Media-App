type Query {
    me: User
    allUsers: [User!]!
    allPosts: [Post!]!
    postsByUser(userId: ID!): [Post!]!
}

type AuthPayload {
    token: String!
    user: User!
}

type User {
    id: ID!
    name: String!
    username: String!
    email: String!
    posts: [Post!]!
    bio  : String
}

type Post {
  id: ID!
  createdAt: String!
  updatedAt: String!
  imageUrl: String!
  caption: String
  author: User! 
  likeCount: Int!
  likedByCurrentUser: Boolean!
}

type DeletePostResponse {
    success: Boolean!
    message: String!
}

# type likedResponse {
#     success: Boolean!
# }


type Mutation {
    signup(name: String!, username: String!, email: String!, password: String!): AuthPayload!
    login(loginIdentifier: String!, password: String!): AuthPayload
    updateProfile(name: String!, username: String!, email: String!, bio: String): User! 
    createPost(imageUrl: String!, caption:String ): Post!
    deletePost(id: ID!) : DeletePostResponse!
    toggleLike(postId: ID!) : Post!
}